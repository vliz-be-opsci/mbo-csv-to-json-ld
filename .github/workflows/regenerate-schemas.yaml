name: Regenerate CSVW Schemas
on:
  workflow_dispatch:
  push:
    paths:
      - 'remote/models/classes.yaml'
      - 'remote/models/slots.yaml'
      - 'remote/models/literals.yaml'

permissions:
  contents: write

jobs:
  regenerate-schemas:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Generate CSVW schemas using Docker
        run: |
          # Pull the latest Docker image with the schema generation tools
          docker pull ghcr.io/marco-bolo/csv-to-json-ld-tools:latest
          
          # Generate final schemas using Docker (run as current user to avoid permission issues)
          docker run --rm -v $(pwd):/work -w /work \
            --user $(id -u):$(id -g) \
            ghcr.io/marco-bolo/csv-to-json-ld-tools:latest \
            python remote/scripts/mbocsvwscripts/generatecsvwdefinitions.py -o temp-output remote/models/classes.yaml
          
          # Apply the changes (WARNING: This replaces all schema files)
          cp -r temp-output/remote/* remote/
          
          # Clean up (use sudo if needed for permission issues)
          rm -rf temp-output || sudo rm -rf temp-output
          
      - name: Generate schema checksums
        run: |
          python <<EOF
          import json
          import hashlib
          import os
          
          def compute_schema_checksum(schema_path):
              with open(schema_path, 'r') as f:
                  schema = json.load(f)
              
              # Extract relevant structural data that affects Google Sheets layout
              relevant_data = {
                  'columns': [
                      {
                          'name': col.get('name'),
                          'titles': col.get('titles'),
                          'required': col.get('required'),
                          'datatype': col.get('datatype'),
                          'virtual': col.get('virtual')
                      }
                      for col in schema.get('columns', [])
                  ],
                  'foreignKeys': schema.get('foreignKeys', [])
              }
              
              schema_str = json.dumps(relevant_data, sort_keys=True)
              return hashlib.md5(schema_str.encode()).hexdigest()
          
          checksums = {}
          for schema_file in os.listdir('remote'):
              if schema_file.endswith('.schema.json'):
                  sheet_name = schema_file.replace('.schema.json', '')
                  try:
                      checksum = compute_schema_checksum(f'remote/{schema_file}')
                      checksums[sheet_name] = checksum
                      print(f"Generated checksum for {sheet_name}: {checksum}")
                  except Exception as e:
                      print(f"Failed to generate checksum for {sheet_name}: {e}")
          
          with open('remote/schema-checksums.json', 'w') as f:
              json.dump(checksums, f, indent=2, sort_keys=True)
          
          print(f"Generated checksums for {len(checksums)} schemas")
          EOF
          
      - name: Commit updated schemas and checksums
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add remote/
          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Regenerate CSVW schemas and update checksums"
            git push
          fi
